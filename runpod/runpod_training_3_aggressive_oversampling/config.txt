from detectron2.config         import get_cfg
from detectron2 import model_zoo
from detectron2.engine         import DefaultTrainer, HookBase
from detectron2.data           import DatasetMapper, build_detection_train_loader
import detectron2.data.transforms as T
from tqdm                      import tqdm
import torch, os

# --- 1) Build config ---
cfg = get_cfg()
cfg.merge_from_file(model_zoo.get_config_file("COCO-Detection/faster_rcnn_R_50_FPN_3x.yaml"))
cfg.DATASETS.TRAIN                = ("train_phase_1_minimal_v2_remapped",)
cfg.DATASETS.TEST                 = ("val_phase_1_minimal_v2_remapped",)
cfg.MODEL.WEIGHTS                 = "/workspace/layoutparser/pretrained_models/model_final.pth"
cfg.MODEL.DEVICE                  = "cuda" if torch.cuda.is_available() else "cpu"
cfg.MODEL.ROI_HEADS.NUM_CLASSES   = 4
cfg.MODEL.ROI_HEADS.SCORE_THRESH_TEST = 0.05
cfg.MODEL.BACKBONE.FREEZE_AT      = 4

cfg.SOLVER.IMS_PER_BATCH          = 8
cfg.SOLVER.BASE_LR                = 2.5e-4
cfg.SOLVER.MAX_ITER               = 2000
cfg.SOLVER.STEPS                  = (1200, 1600)
cfg.SOLVER.GAMMA                  = 0.1
cfg.SOLVER.WARMUP_ITERS           = 100
cfg.SOLVER.WARMUP_METHOD          = "linear"
cfg.SOLVER.LOG_PERIOD             = 50

cfg.DATALOADER.SAMPLER_TRAIN      = "RepeatFactorTrainingSampler"
cfg.DATALOADER.REPEAT_THRESHOLD   = 0.05
cfg.SOLVER.AMP.ENABLED            = True
cfg.MODEL.ROI_HEADS.BATCH_SIZE_PER_IMAGE = 128
cfg.DATALOADER.NUM_WORKERS        = 4

cfg.OUTPUT_DIR = "./training_results/training3_output_gpu_optimized_aggressive_oversampling"
os.makedirs(cfg.OUTPUT_DIR, exist_ok=True)

# --- 2) Augmented Trainer w/ RandomCrop instead of Mosaic ---
class OptionATrainer(DefaultTrainer):
    @classmethod
    def build_train_loader(cls, cfg):
        aug = [
            T.RandomFlip(horizontal=True, vertical=False),
            T.RandomBrightness(0.9, 1.1),
            T.RandomContrast(0.9, 1.1),
            T.RandomRotation(angle=[-5, 5]),
            T.RandomCrop(crop_type="relative_range", crop_size=(0.8, 0.8)),
        ]
        mapper = DatasetMapper(cfg, is_train=True, augmentations=aug)
        return build_detection_train_loader(cfg, mapper=mapper)

# --- 3) TQDM Hook ---
class TQDMHook(HookBase):
    def before_train(self):
        self.pbar = tqdm(total=self.trainer.max_iter, desc="Option A", unit="iter")
    def after_step(self):
        loss = self.trainer.storage.latest().get("total_loss", 0)
        if isinstance(loss, (tuple, list)): loss = loss[0]
        self.pbar.set_postfix(loss=float(loss))
        self.pbar.update(1)
    def after_train(self):
        self.pbar.close()

# --- 4) Run Training ---
trainer = OptionATrainer(cfg)
trainer.register_hooks([TQDMHook()])
trainer.resume_or_load(resume=False)
trainer.train()