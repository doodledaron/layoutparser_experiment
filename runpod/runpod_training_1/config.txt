# ⚙️ Detectron2 GPU Config Setup for A40 (Fast Training)
from detectron2.config import get_cfg
from detectron2 import model_zoo
import os
import torch

cfg = get_cfg()
cfg.merge_from_file(model_zoo.get_config_file("COCO-Detection/faster_rcnn_R_50_FPN_3x.yaml"))

# Dataset
cfg.DATASETS.TRAIN = ("train_phase_1_minimal_v2_remapped",)
cfg.DATASETS.TEST  = ("val_phase_1_minimal_v2_remapped",)

# Pretrained PubLayNet weights
cfg.MODEL.WEIGHTS = "/workspace/layoutparser/pretrained_models/model_final.pth"
cfg.MODEL.ROI_HEADS.NUM_CLASSES = 4
cfg.MODEL.ROI_HEADS.SCORE_THRESH_TEST = 0.8

# GPU Settings
cfg.MODEL.DEVICE = "cuda" if torch.cuda.is_available() else "cpu"
cfg.SOLVER.IMS_PER_BATCH = 8  # Increase batch size now that we're using GPU
cfg.SOLVER.AMP.ENABLED = True  # Enable mixed precision for speed

# Training schedule
cfg.SOLVER.BASE_LR = 0.00025
cfg.SOLVER.MAX_ITER = 1000
cfg.SOLVER.STEPS = (600, 800)
cfg.SOLVER.GAMMA = 0.1
cfg.SOLVER.WARMUP_ITERS = 100
cfg.SOLVER.WARMUP_METHOD = "linear"
cfg.SOLVER.LOG_PERIOD = 50

# Sampler for class imbalance
cfg.DATALOADER.SAMPLER_TRAIN = "RepeatFactorTrainingSampler"
cfg.DATALOADER.REPEAT_THRESHOLD = 0.1
cfg.DATALOADER.NUM_WORKERS = 4  # Tune based on CPU cores

# Freeze backbone to reduce overfitting
cfg.MODEL.BACKBONE.FREEZE_AT = 5
cfg.MODEL.ROI_HEADS.BATCH_SIZE_PER_IMAGE = 128

# Output directory
cfg.OUTPUT_DIR = "./training_results/training3_output_gpu_optimized"
os.makedirs(cfg.OUTPUT_DIR, exist_ok=True)

print("✅ Config ready. Device:", cfg.MODEL.DEVICE)
